# -*- coding: utf-8 -*-
"""Medical Trial - Questions and Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/medical-trial-questions-and-analysis-2da85425-e1b8-4574-ba91-bb38120b63d5.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241117/auto/storage/goog4_request%26X-Goog-Date%3D20241117T105756Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4e0b65b038b67559d12e2e6106224e7055782035454004764e4f85eff416036b0fcb0d2710fd2617816bb7379df6262d59c9dbbcd320a10fa10be127f216c018cbea81864f81d8470c3636de007ede33563fcfca3e5eebcb6b57fd9efc90bcb4c4d5c73b8d272a02792f4a107dd2e9bbd6bd439db2c8ff3b9e1a8e800211c9c8e8a018a35c73b3f8da8614457d9dab5c45fc75b96dbadd681e4a40fe15d014c290c9bc5d6efd7647a3db5755d15219338ba7a24805c395f596b5c05ea2ef46147b206f6b6d7eac5b918357d728fb333ec0ae982ce0d6691db0e66a2835bbf95699c0518ff1cf11501201d3565aa0cb437389aac3a5c3280a254db70380e97711

<div style="padding:20px;color:white;margin:0;font-size:300%;text-align:center;display:fill;border-radius:80px;background-color:#0097da;overflow:hidden;font-weight:800">Medical Trial Case Study</div>

## <b><div style='padding:15px;background-color:#0097da;color:white;border-radius:80px;font-size:110%;text-align: center'>2  |  Libraries</div></b>
"""

import locale
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.offline as pyo
import plotly.io as pio


import warnings
warnings.filterwarnings('ignore')

"""## <b><div style='padding:15px;background-color:#0097da;color:white;border-radius:40px;font-size:110%;text-align: center'>3  |  Download Dataset</div></b>"""

#Read data from a csv file
df = pd.read_csv('/kaggle/input/medical-trial-dataset/Admin.csv')

df.head()

"""## <b><div style='padding:15px;background-color:#0097da;color:white;border-radius:40px;font-size:110%;text-align: center'>4  |  Inspecting Dataframe Structure</div></b>"""

# Dataframe summary

def summary(df):
    print(f'data shape: {df.shape}')
    summ = pd.DataFrame(df.dtypes, columns=['Data Type'])
    summ['Missing#'] = df.isna().sum()
    summ['Missing%'] = (df.isna().sum())/len(df)
    summ['Dups'] = df.duplicated().sum()
    summ['Uniques'] = df.nunique().values
    summ['Count'] = df.count().values
    desc = pd.DataFrame(df.describe(include='all').transpose())
    summ['Min'] = desc['min'].values
    summ['Max'] = desc['max'].values
    summ['Average'] = desc['mean'].values
    summ['Standard Deviation'] = desc['std'].values
    summ['First Value'] = df.loc[0].values
    summ['Second Value'] = df.loc[1].values
    summ['Third Value'] = df.loc[2].values

    display(summ)

summary(df)

"""<div class="alert alert-block alert-info" style="background-color:#F0EEED;color:#0097da;border-color:black;width:80%;margin: auto;text-align: center;"><b>Insight: </b>No Missing and No Duplicates  data.</div>"""

# Convert date columns to datetime
df['Admin Date'] = pd.to_datetime(df['Admin Date'], format='%d/%m/%Y')

# Convert Units to numeric
df = df.replace({',': ''}, regex=True)
df['Units'] = pd.to_numeric(df['Units'], errors='coerce')

# Create the column with the month.
df['Admin_month'] = df['Admin Date'].dt.month

# Let's visualize the use of medications over time.
fig, ax = plt.subplots(figsize=(10, 4))
sns.lineplot(data=df, x="Admin Date", y="Units", style='Med', markers=True, hue="Med")
plt.show()

"""## <b><div style='padding:15px;background-color:#0097da;color:white;border-radius:80px;font-size:110%;text-align: center'>5  |  Questions and Analysis</div></b>

## <b><span style='color:#DEB078'></span><span style='color:#2368e1'> We will answer the questions through tables, graphs or both.</span></b>

### <b><span style='color:#DEB078'>5.1 |</span><span style='color:#2368e1'> How many doses of medications were used during this study?</span></b>
"""

print(pd.DataFrame({"Med": df["Med"].value_counts(),
                    "Ratio": 100 * df["Med"].value_counts() / len(df)}))

fig, ax = plt.subplots(1, 2, figsize=(16, 8))
plt.subplot(1, 2, 1)
sns.countplot(x="Med", data=df)
plt.title("Frequency of Med")
plt.xticks(rotation=90)

plt.subplot(1, 2, 2)
values = df["Med"].value_counts()
plt.pie(x=values, labels=values.index, autopct=lambda p: '{:.2f}% ({:.0f})'.format(p, p/100 * sum(values)))
plt.title("Frequency of Med")
plt.legend(labels=['{} - {:.2f}%'.format(index, value/sum(values)*100) for index, value in zip(values.index, values)],
                   loc='upper center', bbox_to_anchor=(0.5, -0.2), fancybox=True, shadow=True, ncol=1)
plt.show(block=True)

"""### <b><span style='color:#DEB078'>5.2 |</span><span style='color:#2368e1'> What is the total number of units administered in each month across all patients?</span></b>  """

df['Un_acm_mon'] = df.groupby('Admin_month')['Units'].cumsum()

df_unit_month = pd.DataFrame({"Units_per_month": df.groupby('Admin_month')['Un_acm_mon'].max(),
                    "Ratio": 100 * (df.groupby('Admin_month')['Un_acm_mon'].max()) / df['Units'].sum()})
df_unit_month = df_unit_month.reset_index()

print(pd.DataFrame({"Units_per_month": df.groupby('Admin_month')['Un_acm_mon'].max(),
                    "Ratio": 100 * (df.groupby('Admin_month')['Un_acm_mon'].max()) / df['Units'].sum()}))

fig, ax = plt.subplots(1, 2, figsize=(16, 8))
plt.subplot(1, 2, 1)
sns.barplot(x = "Admin_month", y="Units_per_month", data=df_unit_month)
plt.title("Frequency of Units_per_month")
plt.xticks(rotation=90)

plt.subplot(1, 2, 2)
df_unit_month_i = df_unit_month.set_index(['Admin_month'])
values = df_unit_month_i["Units_per_month"]
plt.pie(x=values, labels=values.index, autopct=lambda p: '{:.2f}% ({:.0f})'.format(p, p/100 * sum(values)))
plt.title("Frequency of Units_per_month")
plt.legend(labels=['{} - {:.2f}%'.format(index, value/sum(values)*100) for index, value in zip(values.index, values)],
                   loc='upper center', bbox_to_anchor=(0.5, -0.2), fancybox=True, shadow=True, ncol=1)
plt.show(block=True)

"""### <b><span style='color:#DEB078'>5.3 |</span><span style='color:#2368e1'> What is the total number of units administered for each medication in each month across all patients?</span></b>"""

df['Un_acm_mon_med'] = df.groupby(['Admin_month', "Med"])['Units'].cumsum()

df_unit_month_med = pd.DataFrame({"Units_per_month": df.groupby(['Admin_month', "Med"])['Un_acm_mon_med'].max(),
                    "Ratio": 100 * (df.groupby(['Admin_month', "Med"])['Un_acm_mon_med'].max()) / df['Units'].sum()})
df_unit_month_med = df_unit_month_med.reset_index()

print(pd.DataFrame({"Units_per_month": df.groupby(['Admin_month', "Med"])['Un_acm_mon_med'].max(),
                    "Ratio": 100 * (df.groupby(['Admin_month', "Med"])['Un_acm_mon_med'].max()) / df['Units'].sum()}))

fig, axs = plt.subplots(1, 2, figsize=(16, 8))
plt.subplot(1, 2, 1)
sns.barplot(x = "Admin_month", y="Units_per_month", data=df_unit_month_med, hue = "Med")
plt.title("Frequency of Units_per_month by Med")
plt.xticks(rotation=90)

plt.subplot(1, 2, 2)
df_unit_month_med_i = df_unit_month_med.set_index(['Admin_month'])
values = df_unit_month_med_i["Units_per_month"]
plt.pie(x=values, labels=values.index, autopct=lambda p: '{:.2f}% ({:.0f})'.format(p, p/100 * sum(values)))
plt.title("Frequency of Units_per_month by Med")
plt.legend(labels=['{} - {:.2f}%'.format(index, value/sum(values)*100) for index, value in zip(values.index, values)],
                   loc='upper center', bbox_to_anchor=(0.5, -0.2), fancybox=True, shadow=True, ncol=1)
plt.show(block=True)

"""### <b><span style='color:#DEB078'>5.4 |</span><span style='color:#2368e1'> What is the average total monthly dose per patient for each medication from July to November?</span></b>"""

df_unit_month_med_ID = pd.DataFrame({"doses_per_month": df.groupby(['Med', 'Admin_month'])['ID'].nunique(),
                                    "Units_per_month": df.groupby(['Med', "Admin_month"])['Un_acm_mon_med'].max()})
df_unit_month_med_ID['avg_dose_ID_month'] = (df_unit_month_med_ID['Units_per_month'] / df_unit_month_med_ID['doses_per_month']).round(1)
df_unit_month_med_ID = df_unit_month_med_ID.reset_index()
df_unit_month_med_ID

fig, ax = plt.subplots(figsize=(10, 4))
sns.barplot(x = "Admin_month", y="avg_dose_ID_month", data=df_unit_month_med_ID, hue = "Med")
plt.title("AVG Dose per ID per Month")
plt.xticks(rotation=90)
ax.bar_label(ax.containers[0], fmt='%0.1f', rotation = 0, fontsize = 9)
ax.bar_label(ax.containers[1], fmt='%0.1f', rotation = 0, fontsize = 9)
plt.show()

"""### <b><span style='color:#DEB078'>5.5 |</span><span style='color:#2368e1'> How many patients switched from Medication A to Medication B each month (September, October, November)?</span></b>"""

df['ID_Med'] = df.apply(lambda x: '%s_%s' % (x['ID'],x['Med']), axis=1)

df.head()

df_ID_Med = pd.crosstab(df["ID"], df["Med"])

df_ID_Med_A_B = df_ID_Med[df_ID_Med['Med A'] > 0]
df_ID_Med_A_B = df_ID_Med_A_B[df_ID_Med_A_B['Med B'] > 0].reset_index()
df_ID_Med_A_B.head()

df_ID_Med_A_B['ID'].unique()

query = [  1,   2,   4,   5,   8,   9,  10,  12,  15,  16,  17,  18,  19,
        20,  21,  22,  25,  28,  29,  30,  31,  33,  35,  36,  38,  39,
        42,  46,  47,  48,  49,  52,  53,  54,  57,  60,  63,  65,  66,
        67,  69,  73,  74,  75,  77,  81,  82,  83,  85,  86,  87,  90,
        91,  92,  94,  96,  97,  98,  99, 100, 101, 104, 105, 106, 108,
       109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 125,
       126, 128, 129]

df_A_B = df[df['ID'].isin(query)]
df_A_B.head()

df_ID_Med_Month_A_B = df_A_B[['ID', 'Med', 'Admin_month']]
df_ID_Med_Month_A_B.head()

df_ID_Med_Month_A_B = df_ID_Med_Month_A_B.drop_duplicates(subset=['ID', 'Med'])
df_ID_Med_Month_A_B.head()

df_ID_Med_cross = pd.crosstab(df_ID_Med_Month_A_B["Med"], df_ID_Med_Month_A_B["Admin_month"]).reset_index()
df_ID_Med_cross

df_ID_Med_cross = df_ID_Med_cross[df_ID_Med_cross['Med'] == "Med B"]
df_ID_Med_cross = df_ID_Med_cross.set_index('Med').T
df_ID_Med_cross = df_ID_Med_cross.reset_index()

df_ID_Med_cross

fig, ax = plt.subplots(figsize=(10, 4))
sns.barplot(x = 'Admin_month', y = "Med B", data=df_ID_Med_cross)
plt.title("How many patients switched from Medication A to Medication B each month")
plt.xticks(rotation=0)
ax.bar_label(ax.containers[0], fmt='%0.0f', rotation = 0, fontsize = 9)
plt.show()

"""### <b><span style='color:#DEB078'>5.6 |</span><span style='color:#2368e1'> How many patients started on Medication B without being on Medication A in the past?</span></b>"""

df_ID_Med_B = df_ID_Med[df_ID_Med['Med A'] == 0].reset_index()
df_ID_Med_B.head()

contagem_linhas = len(df_ID_Med_B.index)
print("How many patients started on Medication B without being on Medication A in the past:", contagem_linhas)

"""### <b><span style='color:#DEB078'>5.7 |</span><span style='color:#2368e1'> For patients who switched to Medication B, what is the average number of weeks spent on Medication A before switching?</span></b>"""

df_A_B.head()

df_A_B_drop = df_A_B.drop_duplicates(subset=['ID', 'Med'])
df_A_B_drop.head()

df_A_B_ID_Med_Adm = df_A_B_drop[['ID', 'Med', 'Admin Date']]
df_A_B_ID_Med_Adm.head()

df_A_B_ID_Med_Adm['Diff'] = df_A_B_ID_Med_Adm['Admin Date'].diff()
df_A_B_ID_Med_Adm.head()

df_B_ID_Med_Adm = df_A_B_ID_Med_Adm[df_A_B_ID_Med_Adm['Med'] != 'Med A']
df_B_ID_Med_Adm.head()

mean_df = df_B_ID_Med_Adm["Diff"].mean()
mean_df

# Let's exclude one day, which is the day on which patients started using medication B.
from datetime import datetime, timedelta
interval = timedelta(days=1)
interval_days = mean_df - interval

# Let's convert the number of days into weeks.
interval = timedelta(days=7)
interval_weeks = interval_days / interval
print("average number of weeks spent on Medication A before switching:", interval_weeks)

"""### <b><span style='color:#DEB078'>5.8 |</span><span style='color:#2368e1'> What is the average monthly dose of Medication A for patients before switching to Medication B?</span></b>"""

df_A_B.head()

df_A_B["total_doses_per_ID"] = df_A_B.groupby('ID_Med')['ID'].transform('count')
df_A_B.head()

df_A_B_drop_dup = df_A_B.drop_duplicates(subset=['ID', 'Med'])
df_A_B_drop_dup.head()

df_A_B_diff = df_A_B_drop_dup.copy()
df_A_B_diff['Diff'] = df_A_B_drop_dup['Admin Date'].diff()
df_A_B_diff.head()

df_A_B_diff['days_per_ID'] = df_A_B_diff.Diff.shift(-1)
df_A_B_diff.head()

df_A_B_diff.drop(["Diff"], axis=1, inplace=True)

df_A = df_A_B_diff[df_A_B_diff['Med'] == 'Med A']
df_A.head()

df_A['days_per_ID'] = df_A['days_per_ID'].apply(lambda x: x.days)
df_A.head()

df_A['doses_per_month_per_ID'] = df_A['total_doses_per_ID'] / (df_A['days_per_ID'] / 30.5)
df_A.head()

doses_per_month_med_A = df_A["doses_per_month_per_ID"].mean().round(2)
print("average monthly dose of Medication A for patients before switching to Medication B:", doses_per_month_med_A)

"""### <b><span style='color:#DEB078'>5.9 |</span><span style='color:#2368e1'> What is the average monthly dose of Medication B post-switch?</span></b>"""

df_A_B.head()

df_B = df_A_B[df_A_B['Med'] == 'Med B']
df_B.head()

df_B_diff = df_B.copy()

df_B_diff['days_per_ID'] = df_B_diff.groupby('ID')['Admin Date'].diff()

df_B_diff['days_per_ID'] = df_B_diff['days_per_ID'].apply(lambda x: x.days)

df_B_diff.head()

df_B_diff['days_acm'] = df_B_diff.groupby('ID')['days_per_ID'].cumsum()
df_B_diff.head()

df_max = df_B_diff.groupby(['ID', 'total_doses_per_ID'])['days_acm'].max().dropna().reset_index()
df_max.head()

# Let's consider that each month has an average of 30.5 days.
df_max['doses_per_month_per_ID'] = df_max['total_doses_per_ID'] / (df_max['days_acm'] / 30.5)
df_max.head()

doses_per_month_med_B = df_max["doses_per_month_per_ID"].mean().round(2)
print("average monthly dose of Medication B post-switch:", doses_per_month_med_B)

"""### <b><span style='color:#DEB078'>5.10 |</span><span style='color:#2368e1'> If Medication A costs $1 for 100 units, what is the breakeven price point for Medication B on a per-unit basis?</span></b>

<div class="alert alert-block alert-info" style="background-color:#F0EEED;color:#0097da;border-color:black;width:80%;margin: auto;text-align: center;"><b>Insight: </b>Breakeven price means, in this case, the price of Medicine B that leaves the cost of treatment the same for medicine A and B. To do this, we will calculate the consumption in average units for treatment with Medicine A and B.</div>
"""

# Average quantity of Units used per dose for patients who used medicines A and B.

df_mean_unit = df_A_B.groupby(['Med'])['Units'].mean().dropna().reset_index().round(2)
df_mean_unit.head()

# Other data already calculated previously.

print("average monthly dose of Medication A for patients before switching to Medication B:", doses_per_month_med_A)
print("average monthly dose of Medication B post-switch:", doses_per_month_med_B)

# Add column with monthly average doses per patient "Doses_per_ID".
df_mean_unit.insert(2, "Doses_per_ID", [8.52, 1.57], True)

# Add column with Total Units per Month "Units_per_month".
df_mean_unit['Units_per_month'] = (df_mean_unit['Units'] * df_mean_unit['Doses_per_ID']).round(2)

df_mean_unit

# Calculate the total monthly cost using med A.
# Medication A costs $1 for 100 units or $0.01 per unit

total_cost_month_med_A = 45304.50 * 0.01
total_cost_month_med_A = f"{total_cost_month_med_A:.2f}"

print("Total Cost per month of Med A: $", total_cost_month_med_A)

# Calculate the price of med B to have the same monthly cost as treatment with med A

cost_of_unit_med_B = 453.045 / 10.14
cost_of_unit_med_B = f"{cost_of_unit_med_B:.2f}"

print("the breakeven price point for Medication B on a per-unit basis is $", cost_of_unit_med_B)

# Let's calculate the total monthly cost of med B to check if it is the same as med A.
total_cost_month_med_B = 10.14 * 44.68
total_cost_month_med_B = f"{total_cost_month_med_B:.2f}"

print("Total Cost per month of Med B: $", total_cost_month_med_B)